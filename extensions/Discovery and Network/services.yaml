kind: ConfigMap
apiVersion: v1
metadata:
  name: services
  namespace: baby-yoda
  labels:
    app.kubernetes.io/name: services
    busola.io/extension: resource
    busola.io/extension-version: '0.5'
data:
  details: |-
    header:
      - name: Controlled by
        source: metadata.ownerReferences
        widget: ControlledBy
      - name: Type
        source: spec.type
      - name: Cluster IP
        source: spec.clusterIP
      - name: Ports
        source: >-
          $count(spec.ports) ? $map(spec.ports, function($value) {$value.port =
          $value.targetPort ? [$string($value.port), '/', $string($value.protocol)]
          ~> $join('') : [$string($value.port), ':', $string($value.targetPort),
          '/', $string($value.protocol)] ~> $join('') }) ~> $join(', ')  : '-'
      - name: External IPs
        source: >-
          $count(status.loadBalancer.ingress) ? $map(status.loadBalancer.ingress,
          function($value) {$value.ip ? $value.ip : $value.hostname}) ~> $join(',
          '): ($count($item.spec.externalIPs) ? $item.spec.externalIPs ~> $join(',
          '): '-')
    body:
      - widget: ResourceList
        source: $subscriptions()
        name: Subscription
        children:
          - source: metadata.name
            name: Name
            sort: 'true'
            widget: ResourceLink
            resource:
              name: metadata.name
              namespace: $root.metadata.namespace
              kind: kind
          - source: spec.filter.filters[0].eventType.value
            name: First event type
            sort:
              default: true
              compareFunction: $compareStrings($first, $second)
          - source: status.ready
            name: Ready
            sort: true
            widget: Badge
            highlights:
              positive:
                - 'true'
              negative:
                - 'false'
      - widget: ResourceList
        source: $apirules()
        name: API Rule
        sort:
          - source: spec.service.host
            default: true
          - source: spec.service.port
            compareFunction: $first - $second
  form: |-
    - widget: KeyValuePair
      path: spec.selector
      simple: true
      name: Enter Selectors
      placeholder: spec.selector
    - path: spec.type
      name: spec.type
      placeholder: Enter Type 
      trigger: [server]   
    - widget: GenericList
      path: spec.ports
      simple: true
      children:
        - path: '[]'
          simple: true
          children:
            - path: name
              simple: true
              name: spec.ports.name
              placeholder: spec.ports.name.placeholder
            - path: protocol
              simple: true
              name: spec.ports.protocol
              placeholder: spec.ports.protocol.placeholder
              widget: Text
              required: true
            - path: port
              simple: true
              name: spec.ports.port
              placeholder: spec.ports.port.placeholder
              required: true
            - path: targetPort
              simple: true
              name:  spec.ports.targetPort
              placeholder: spec.ports.targetPort.placeholder
              widget: Text
              required: true
              inputInfo: Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535.
            - path: nodePort
              simple: true
              name: spec.ports.nodePort
              placeholder: spec.ports.nodePort.placeholder
            - path: appProtocol
              simple: true
              name: spec.ports.applicationProtocol
              placeholder: spec.ports.applicationProtocol.placeholder
      template:
        protocol: 'TCP'
        port: 80
        targetPort: 9376 
    - widget: SimpleList
      path: spec.ipFamilies
      name: spec.ipFamilies
      visibility: "$root.spec.type != 'ExternalName'"
      children:
        - path: '[]'
      placeholder: spec.ipFamilies.placeholder
    - path: spec.ipFamilyPolicy
      name: spec.ipFamilyPolicy
      placeholder: spec.ipFamilyPolicy.placeholder
      enum: 
        - SingleStack
        - PreferDualStack
        - RequireDualStack
      visibility: "$root.spec.type != 'ExternalName'"
    - widget: SimpleList
      path: spec.clusterIPs
      name: spec.clusterIPs
      children:
        - path: '[]'
      placeholder: spec.clusterIPs.placeholder
      visibility: "$root.spec.type != 'ExternalName'"
    - path: spec.clusterIP
      name: spec.clusterIP
      placeholder: spec.clusterIP.placeholder
      visibility: "$root.spec.type != 'ExternalName'"
    - widget: SimpleList
      path: spec.externalIPs
      name: spec.externalIPs
      children:
        - path: '[]'
      placeholder: spec.externalIPs.placeholder
    - path: spec.sessionAffinity
      name: spec.sessionAffinity 
      placeholder: spec.sessionAffinity.placeholder 
    - path: spec.externalTrafficPolicy
      name: spec.externalTrafficPolicy
      placeholder: spec.externalTrafficPolicy.placeholder
    - path: spec.internalTrafficPolicy
      name: spec.internalTrafficPolicy
      placeholder: spec.internalTrafficPolicy.placeholder
    - widget: SimpleList
      path: spec.loadBalancerSourceRanges
      name: spec.loadBalancerSourceRanges
      children:
        - path: '[]'
      placeholder: spec.loadBalancerSourceRanges.placeholder
    - path: spec.loadBalancerClass
      name: spec.loadBalancerClass
      placeholder: spec.loadBalancerClass.placeholder
      visibility: "$root.spec.type = 'LoadBalancer'"
    - path: spec.externalName
      name: loadBalancer Class
      placeholder: spec.externalName.placeholder
      visibility: "$root.spec.type = 'ExternalName'"
    - path: spec.loadBalancerIP
      name: loadBalancer IP
      placeholder: spec.loadBalancerIP.placeholder
    - path: spec.healthCheckNodePort
      name: spec.healthCheckNodePort
      placeholder: spec.healthCheckNodePort.placeholder
      visibility: "$root.spec.type = 'LoadBalancer' and $root.spec.externalTrafficPolicy = 'Local'"
    - path: spec.allocateLoadBalancerNodePorts
      name: spec.allocateLoadBalancerNodePorts
      visibility: "$root.spec.type = 'LoadBalancer'"
      subscribe:
        server: "$root.spec.type = 'LoadBalancer'"

  list: |-
    - name: Controlled By
      source: metadata.ownerReferences
      widget: ControlledBy
      kindOnly: true
    - name: Type
      source: spec.type
      sort:
        compareFunction: $compareStrings($second, $first)
    - name: Cluster IP
      source: spec.clusterIP
      sort: true
    - name: Ports
      source: >-
        $count(spec.ports) ? $map(spec.ports, function($value) {$value.port =
        $value.targetPort ? [$string($value.port), '/', $string($value.protocol)] ~>
        $join('') : [$string($value.port), ':', $string($value.targetPort), '/',
        $string($value.protocol)] ~> $join('') }) ~> $join(', ')  : '-'
    - name: External IPs
      source: >-
        $count(status.loadBalancer.ingress) ? $map(status.loadBalancer.ingress,
        function($value) {$value.ip ? $value.ip : $value.hostname}) ~> $join(', '):
        ($count($item.spec.externalIPs) ? $item.spec.externalIPs ~> $join(', '):
        '-')
  dataSources: |-
    apirules:
      resource:
        kind: APIRule
        group: gateway.kyma-project.io
        version: v1alpha1
      filter: $item.spec.service.name = $root.metadata.name
    subscriptions:
      resource:
        kind: Subscription
        group: eventing.kyma-project.io
        version: v1alpha1
      filter: >-
        $substringAfter($substringBefore($item.spec.sink, '.'), '://') =
        $root.metadata.name
  general: |-
    resource:
      kind: Service
      version: v1
    urlPath: services-ex
    scope: namespace
    name: Services
    category: Discovery and Network
  presets: |-
    - name: template
      default: true
      value:
        spec:
          selector: 
            app: ''
          type: 'ClusterIP'
          allocateLoadBalancerNodePorts: true
  translations: |-
    en:
      spec.selector: Selectors
      spec.selector.placeholder: Enter Selectors
      spec.type: Type
      spec.type.placeholder: Enter Type
      spec.ports.name: Name
      spec.ports.name.placeholder: enter Ports Name
      spec.ports.protocol: Protocol
      spec.ports.protocol.placeholder: Enter the Protocol
      spec.ports.port: Port
      spec.ports.port.placeholder: Enter Port
      spec.ports.targetPort: Target Port
      spec.ports.targetPort.placeholder: Enter Target Port
      spec.ports.nodePort: Node Port 
      spec.ports.nodePort.placeholder: Enter Node Port
      spec.ports.applicationProtocol: Application Protocol
      spec.ports.applicationProtocol.placeholder: Enter Application Protocol
      spec.ipFamilies: IP Family 
      spec.ipFamilies.placeholder: Enter IP Family
      spec.ipFamilyPolicy: IP Family Policy
      spec.ipFamilyPolicy.placeholder: Enter IP Family Policy
      spec.clusterIPs: Cluster IPs
      spec.clusterIPs.placeholder: Enter IP addresses assigned to this service
      spec.clusterIP: Cluster IP
      spec.clusterIP.placeholder: Enter IP address of the service
      spec.externalIPs: External IPs
      spec.externalIPs.placeholder: Enter external IP addresses assigned to this service
      spec.sessionAffinity: Session Affinity
      spec.sessionAffinity.placeholder: Enter Session Affinity
      spec.externalTrafficPolicy: External Traffic Policy
      spec.externalTrafficPolicy.placeholder: Enter External Traffic Policy
      spec.internalTrafficPolicy: Internal Traffic Policy
      spec.internalTrafficPolicy.placeholder: Enter Internal Traffic Policy
      spec.loadBalancerSourceRanges: LoadBalancer Source Ranges
      spec.loadBalancerSourceRanges.placeholder: Enter LoadBalancer Source Ranges
      spec.loadBalancerClass: LoadBalancer Class
      spec.loadBalancerClass.placeholder: Enter LoadBalancer Class
      spec.externalName: external Name
      spec.externalName.placeholder: Enter external Name
      spec.loadBalancerIP: LoadBalancer IP
      spec.loadBalancerIP.placeholder: Enter LoadBalancer IP
      spec.healthCheckNodePort: healthcheck nodePort
      spec.healthCheckNodePort.placeholder: Enter healthcheck nodePort
      spec.allocateLoadBalancerNodePorts: allocate LoadBalancer NodePorts
